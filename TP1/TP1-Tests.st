TestCase subclass: #PruebasCalendario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2018 20:20'!test06AgregarEventoConRecurso    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarPersona: 'Pablo'.    calendario agregarRecurso: 'Parrilla'.    calendario agregarEventoConNombre: 'Asado vegano'               invitados: #('Pedro' 'Pablo' 'Parrilla')               enAnio: 2019 mes: 5 dia: 4 hora: 10.	    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia:4  hora: 10).    self assert: (calendario estaOcupado: 'Pablo'                             enAnio: 2019 mes: 5 dia:4  hora: 10).    self assert: (calendario estaOcupado: 'Parrilla'                             enAnio: 2019 mes: 5 dia:4  hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:55'!test07PersonaAdmiteSuperposicion    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoConNombre: 'Visitar oculista'               invitados: 	#('Pedro')	             enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    calendario agregarEventoConNombre: 'Leer Las Venas abiertas de America Latina'               invitados: #('Pedro')               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:56'!test08RecursoNoAdmiteSuperposicion    | calendario invitados |    invitados := OrderedCollection new.    invitados add: 'Pedro'; add: 'Cama'.    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarRecurso: 'Cama'.    calendario agregarEventoSemanalConNombre: 'Siesta'               semanas: 2               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Cama'                             enAnio: 2019 mes: 5 dia: 11 hora: 10).    self should: [	      calendario agregarEventoConNombre: 'Gran siesta'	                 invitados: invitados	                 enAnio: 2019 mes: 5 dia: 11 hora: 10     ] raise: RecursoOcupadoError.! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:51'!test03AgregarEventoSemanal    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoSemanalConNombre: 'Siesta'               semanas: 3               invitados: #('Pedro') " coleccion de un string "               enAnio: 2019 mes: 5 dia: 4 hora: 10.    " ocupado por 3 semanas "    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 11 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 18 hora: 10).    " desocupado la cuarta semana "    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 25 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2018 20:20'!test02AgregarEventoSimple    | calendario invitados |    invitados := OrderedCollection new.    invitados add: 'Pedro'.    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoConNombre: 'Siesta'               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'	                           enAnio: 2019 mes: 5 dia: 4 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 4 hora: 11).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:46'!test01AgregarPersonas    | calendario |	    calendario := Calendario new.	    self deny: (calendario existePersona: 'Juan').	    calendario agregarPersona: 'Juan'.	    self assert: (calendario existePersona: 'Juan').    self deny: (calendario existePersona: 'Pedro').! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 20:11'!test09RemoverEvento    | calendario invitados |    invitados := OrderedCollection new.    invitados add: 'Pedro'.    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoConNombre: 'Siesta'               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).        calendario removerEvento: 'Siesta'.    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 4 hora: 10).	    calendario agregarEventoSemanalConNombre: 'Gran Siesta'               semanas: 3               invitados: #('Pedro') " coleccion de un string "               enAnio: 2019 mes: 10 dia: 4 hora: 10.    " ocupado por 3 semanas "    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 10 dia: 4 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 10 dia: 11 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 10 dia: 18 hora: 10).    " desocupado la cuarta semana "    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 25 hora: 10).    calendario removerEvento: 'Gran Siesta'.    " desocupado las cuatro semanas "    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 4 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 11 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 18 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 25 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2018 20:20'!test04AgregarEventoSimpleConVariosInvitados    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarPersona: 'Pablo'.    calendario agregarPersona: 'Maria'.    calendario agregarEventoConNombre: 'Partida de ajedrez'               invitados: #('Pedro' 'Pablo') " Coleccion de strings "               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    self assert: (calendario estaOcupado: 'Pablo'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    self deny: (calendario estaOcupado: 'Maria'                           enAnio: 2019 mes: 5 dia: 4 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:52'!test05AgregarRecursos    | calendario |	    calendario := Calendario new.	    self deny: (calendario existePersona: 'Pedro').    self deny: (calendario existeRecurso: 'Proyector').	    calendario agregarPersona: 'Pedro'.    calendario agregarRecurso: 'Proyector'.	    self assert: (calendario existeRecurso: 'Proyector').! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'NicolasDiaz 9/26/2018 00:11'!test11CrearUnaPersonaConNombreYaExistenteLanzaExcepcion 	| calendario |	calendario := Calendario new.	 	calendario agregarPersona: 'Nicolas'.	self assert: (calendario existePersona: 'Nicolas').	    self should: [	      	calendario agregarPersona: 'Nicolas'.    ] raise: YaExistePersona .! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'NicolasDiaz 9/26/2018 00:28'!test15RemoverUnEventoQueNoExisteLanzaExcepion    | calendario |	    calendario := Calendario new.		self should: [ 		calendario removerEvento: 'Siesta' ] raise: EventoInexistente.! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'NicolasDiaz 9/26/2018 14:57'!test16CrearUnEventoSimpleConUnNombreYaExistenteLanzaExcepcion    | calendario invitados |    invitados := OrderedCollection new.    invitados add: 'Pedro'.    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoConNombre: 'Siesta'               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.	self should: [ calendario agregarEventoConNombre: 'Siesta'               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10. ] raise: YaExisteEventoConEseNombre.	! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'NicolasDiaz 9/26/2018 00:14'!test12CrearUnRecursoConNombreYaExistenteLanzaExcepcion 	| calendario |	calendario := Calendario new.	 	calendario agregarRecurso:  'proyector'.	self assert: (calendario existeRecurso:  'proyector').	    self should: [	     calendario agregarRecurso:  'proyector'.    ] raise: YaExisteRecurso  .! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'NicolasDiaz 9/26/2018 01:04'!test10PruebaConvertidorSemanas    | calendario fecha lista |	   calendario := Calendario new.	fecha := DateAndTime year: 2018 month:12  day:10  hour: 3 minute: 0.	lista := calendario convertidorDeSemanas: fecha  cantidadSemanas: 3.		! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'NicolasDiaz 9/26/2018 00:18'!test13CrearUnEventoConCantidadMenorA1LanzaExcepcion    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.	self should: [      calendario agregarEventoSemanalConNombre: 'Siesta'               semanas: 0               invitados: #('Pedro') " coleccion de un string "               enAnio: 2019 mes: 5 dia: 4 hora: 10.	] raise: CantidadDeSemanasMenorAUno.   ! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'NicolasDiaz 9/26/2018 00:25'!test14PreguntarSiEstaOcupadoUnRecursoOPersonaNoExistenteLanzaExcepcion    | calendario |	    calendario := Calendario new.	self should: 	[ calendario estaOcupado: 'nicolas' enAnio: 2018 mes: 8 dia:12  hora: 13 ] raise: NombreNoEncontrado.	! !TestCase subclass: #PruebasEvento	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasEvento methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:12'!test01CrearUnEventoEInvitarPersonasEstanOcupadas	" Arrange "	| persona1 persona2 listaPersonas evento fechaInicial fechaSemanaPosterior |	persona1 := Persona conNombre: 'Nicolas'.		persona2 := Persona conNombre: 'Matias'.				listaPersonas := OrderedCollection new.	listaPersonas add: persona1.	listaPersonas add: persona2. 		fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.	fechaSemanaPosterior := fechaInicial + (Duration days: 7).			evento	:= EventoSimple conListaAsistentes: listaPersonas conFecha: fechaInicial  conNombre: 'entrenar'.	evento invitar.		self assert: (persona1 estaOcupado: fechaInicial).	self assert: (persona2 estaOcupado: fechaInicial).	self deny: (persona1 estaOcupado: fechaSemanaPosterior).	self deny: (persona2 estaOcupado: fechaSemanaPosterior).! !!PruebasEvento methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:13'!test02RemoverEventoSimpleYYaNoEstanOcupadas	| persona1 persona2 listaPersonas evento fechaInicial  |	persona1 := Persona conNombre: 'Nicolas'.		persona2 := Persona conNombre: 'Matias'.				listaPersonas := OrderedCollection new.	listaPersonas add: persona1.	listaPersonas add: persona2.		fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.		evento := EventoSimple conListaAsistentes: listaPersonas conFecha: fechaInicial conNombre:'entrenar'.	evento invitar.	evento borrarEvento.		self deny:  (persona1 estaOcupado: fechaInicial).	self deny:  (persona2 estaOcupado: fechaInicial).	! !TestCase subclass: #PruebasEventoSemanal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasEventoSemanal methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:21'!test01CreandoEventoSemanalEInvitarAsistentes	" Arrange "	| persona1 persona2 listaPersonas evento listaFechas fechaInicial segundaSemana tercerSemana cuartaSemana |	persona1 := Persona conNombre: 'Nicolas'.		persona2 := Persona conNombre: 'Matias'.				listaPersonas := OrderedCollection new.	listaPersonas add: persona1.	listaPersonas add: persona2.		listaFechas := OrderedCollection new.		fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.	segundaSemana := fechaInicial + (Duration days: 7).	tercerSemana := segundaSemana + (Duration days: 7).	cuartaSemana := tercerSemana + (Duration days: 7).		listaFechas add: fechaInicial.	listaFechas add: segundaSemana.	listaFechas add: tercerSemana.		evento := EventoSemanal conListaAsistentes: listaPersonas  conFechas: listaFechas conNombre: 'entrenar'.	evento invitar.			self assert: (persona1 estaOcupado: fechaInicial ).	self assert: (persona1 estaOcupado: segundaSemana ).	self assert: (persona1 estaOcupado: tercerSemana ).	self deny: (persona1 estaOcupado: cuartaSemana).		! !!PruebasEventoSemanal methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:23'!test02RemoverEventoSemanalYLosAsistentesDebenEstarDesocupados	| persona1 persona2 listaPersonas evento listaFechas fechaInicial segundaSemana tercerSemana cuartaSemana |	persona1 := Persona conNombre: 'Nicolas'.		persona2 := Persona conNombre: 'Matias'.				listaPersonas := OrderedCollection new.	listaFechas := OrderedCollection new.		fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.	segundaSemana := fechaInicial + (Duration days: 7).	tercerSemana := segundaSemana + (Duration days: 7).	cuartaSemana := tercerSemana + (Duration days: 7).		listaFechas add: fechaInicial.	listaFechas add: segundaSemana.	listaFechas add: tercerSemana.		listaPersonas add: persona1.	listaPersonas add: persona2.	evento := EventoSemanal conListaAsistentes: listaPersonas  conFechas: listaFechas conNombre: 'entrenar'.	evento invitar.			evento borrarEvento.		self deny:(persona1 estaOcupado: fechaInicial).	self deny:(persona1 estaOcupado: segundaSemana).	self deny:(persona1 estaOcupado: tercerSemana ).	! !TestCase subclass: #PruebasPersona	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasPersona methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 00:53'!test01CrearPersonaYNoEsataOcupada		| persona fechaInicial |	persona := Persona new.	fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.		self deny: (persona estaOcupado: fechaInicial).! !!PruebasPersona methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 00:54'!test03AgregarUnEventoYEstaOcupado	| persona fechaInicial |		persona := Persona conNombre: 'Nicolas'.		fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.	persona agregarEvento: 'Entrenar' conFecha: fechaInicial.		self assert:  (persona estaOcupado: fechaInicial).! !!PruebasPersona methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:24'!test04removerEventoYYaNoEstaOcupado		| persona fechaInicial |	persona := Persona  conNombre: 'Nicolas'.		fechaInicial := DateAndTime year: 2018 month:1 day:1 hour:00 minute: 1.			persona agregarEvento: 'Entrenar' conFecha: fechaInicial.		persona removerEvento: fechaInicial.				self deny:  (persona estaOcupado: fechaInicial).	! !!PruebasPersona methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 00:54'!test02CrearPersonaConstructorYNoEsataOcupada	" Arrange "	| persona fechaInicial |	persona := Persona conNombre: 'Nicolas'.			fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.	self deny: (persona estaOcupado: fechaInicial).! !TestCase subclass: #PruebasRecurso	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasRecurso methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:10'!test04removerEventoYYaNoEstaOcupado		| recurso fechaInicial |	recurso := Recurso  conNombre: 'Proyector'.		fechaInicial := DateAndTime year: 2018 month:1 day:1 hour:00 minute: 1.			recurso agregarEvento: 'Clase algoritmos' conFecha: fechaInicial.		self assert:  (recurso estaOcupado: fechaInicial).		recurso removerEvento: fechaInicial.		self deny:  (recurso estaOcupado: fechaInicial).	! !!PruebasRecurso methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:09'!test03AgregoEventoAUnRecusoYEstaOcupado		| recurso fechaInicial |	recurso := Recurso  conNombre: 'Proyector'.		fechaInicial := DateAndTime year: 2018 month:1 day:1 hour:00 minute: 1.			recurso agregarEvento: 'Clase algoritmos' conFecha: fechaInicial.		self assert:  (recurso estaOcupado: fechaInicial).	! !!PruebasRecurso methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 01:00'!test02CrearRecursoConstructorYNoEsataOcupado		| recurso fechaInicial |	recurso := Recurso conNombre: 'Proyector'.			fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.	self deny: (recurso estaOcupado: fechaInicial).! !!PruebasRecurso methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 00:57'!test01CrearRecursoYNoEsataOcupado		| recurso fechaInicial |	recurso := Recurso new.	fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.		self deny: (recurso estaOcupado: fechaInicial).! !!PruebasRecurso methodsFor: 'tests' stamp: 'NicolasDiaz 9/26/2018 15:10'!test05ExcepcionLanzadaAlSuperponerRecurso	| recurso fechaInicial |	recurso := Recurso conNombre: 'Pizarra'.		fechaInicial := DateAndTime year: 2018 month:1  day:1  hour:00  minute: 1.	recurso agregarEvento: 'Clase Algebra' conFecha: fechaInicial.		self assert:  (recurso estaOcupado: fechaInicial).	    self should: [	     recurso agregarEvento: 'Presentacion TP' conFecha: fechaInicial.    ] raise: RecursoOcupadoError.! !